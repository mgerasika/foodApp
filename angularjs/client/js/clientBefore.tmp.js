/* Generated by SharpKit 5 v5.5.0 */
if (typeof ($CreateAnonymousDelegate) == 'undefined') {
    var $CreateAnonymousDelegate = function (target, func) {
        if (target == null || func == null)
            return func;
        var delegate = function () {
            return func.apply(target, arguments);
        };
        delegate.func = func;
        delegate.target = target;
        delegate.isDelegate = true;
        return delegate;
    }
}


var angularUtils = function (){
    this._controllers =  [];
    this._directives =  [];
    this._filters =  [];
    this.module = null;
};
angularUtils.c_sModuleName = "StudyLogApiApp";
angularUtils.inst = new angularUtils();
angularUtils.prototype.registerControllerType = function (controller){
    this._controllers.push(controller);
};
angularUtils.prototype.registerDirectiveType = function (directive){
    this._directives.push(directive);
};
angularUtils.prototype.registerFilterType = function (filter){
    this._filters.push(filter);
};
angularUtils.prototype.linkControllerWithAngularJs = function (angularController){
    var func1 = new Function("$scope", "$http", "$location", "$filter", "var cstype = \'" + angularController.get_namespace() + "." + angularController.get_className() + "\';" + "angularUtils.inst.createController(cstype,$scope,$http,$location,$filter);");
    var str = "StudyLogApiApp.controller(\'" + angularController.get_className() + "\',func1);";
    eval(str);
};
angularUtils.prototype.createController = function (jstype, scope, http, loc, filter){
    var type = this.getJsType(jstype);
    var obj = null;
    if (type["inst"] != null){
        obj = type["inst"];
    }
    else {
        obj = this.createInstance(jstype);
    }
    var ctrl = obj;
    ctrl.init(scope, http, loc, filter);
};
angularUtils.prototype.getJsType = function (cstype){
    var arr = cstype.split(".");
    var res = window;
    for (var i = 0; i < arr.length; ++i){
        var key = arr[i];
        var tmpObj = res[key];
        res = tmpObj;
    }
    return res;
};
angularUtils.prototype.linkDirectiveWithAngularJs = function (directive){
    var module = window["StudyLogApiApp"];
    module.directive(directive.get_attrName(), $CreateAnonymousDelegate(this, function (){
        var obj = this.createInstance(directive.get_namespace() + "." + directive.get_className());
        obj.initDirectiveInternal();
        return obj;
    }));
};
angularUtils.prototype.linkFilterWithAngularJs = function (filter){
    var module = window["StudyLogApiApp"];
    module.filter(filter.get_filterName(), $CreateAnonymousDelegate(this, function (){
        var obj = this.createInstance(filter.get_namespace() + "." + filter.get_className());
        var fn = obj["filter"];
        return fn;
    }));
};
angularUtils.prototype.createInstance = function (cstype){
    var obj = "var obj = new " + cstype + "()";
    try{
        eval(obj);
    }
    catch(ex){
        obj = null;
    }
    return obj;
};
angularUtils.prototype.before = function (){
    this.module = angular.module("StudyLogApiApp",  []);
    window["StudyLogApiApp"] = this.module;
};
angularUtils.prototype.after = function (){
    for (var i = 0; i < this._controllers.length; ++i){
        this.linkControllerWithAngularJs(this._controllers[i]);
    }
    for (var i = 0; i < this._directives.length; ++i){
        this.linkDirectiveWithAngularJs(this._directives[i]);
    }
    for (var i = 0; i < this._filters.length; ++i){
        this.linkFilterWithAngularJs(this._filters[i]);
    }
    angularUtils.addFilter();
};
angularUtils.addFilter = function (){
    eval("StudyLogApiApp.filter(\'rawHtml\', [\'$sce\', function($sce){return function(val) {return $sce.trustAsHtml(val);};}]);");
};
if (typeof(angularjs) == "undefined")
    var angularjs = {};
angularjs.ProgramBefore = function (){
};
angularUtils.inst.before();
angularjs.angularController = function (){
    this._scope = null;
    this._http = null;
    this._location = null;
    this.Filter = null;
    angularUtils.inst.registerControllerType(this);
};
angularjs.angularController.prototype.get__model = function (){
    var scope = this._scope instanceof Object ? this._scope : null;
    var obj = scope["model"];
    return obj;
};
angularjs.angularController.prototype.set__model = function (value){
    var scope = this._scope instanceof Object ? this._scope : null;
    scope["model"] = value;
};
angularjs.angularController.prototype.init = function (scope, http, loc, filter){
    this._scope = scope;
    this._http = http;
    this._location = loc;
    this.Filter = filter;
    var copy = this;
    for (var key in copy){
        scope[key] = copy[key];
    }
};
angularjs.angularDirective = function (){
    this._attrs = null;
    this._element = null;
    this._scope = null;
};
angularjs.angularDirective.prototype.get_restrict = function (){
    return "A";
};
angularjs.angularDirective.prototype.get_getScope = function (){
    return true;
};
angularjs.angularDirective.prototype.get_attrName = function (){
    var res;
    if (this.get_className() != null){
        res = this.get_className().toLowerCase();
    }
    else {
        res = this.get_className().toLowerCase();
    }
    return res;
};
angularjs.angularDirective.prototype.template = function (element, attrs){
    var res = $("#" + this.getTemplateId()).html();
    return res;
};
angularjs.angularDirective.prototype.getTemplateId = function (){
    return "_id" + this.get_className();
};
angularjs.angularDirective.prototype.initDirectiveInternal = function (){
    var self = this;
    self["restrict"] = this.get_restrict();
    self["scope"] = this.get_getScope();
};
angularjs.angularDirective.prototype.init = function (s, element, attrs){
    this._scope = s;
    this._element = element;
    this._attrs = attrs;
};
angularjs.angularDirective.prototype.link = function (s, element, attrs){
    var cstype = attrs["cstype"];
    var obj = angularUtils.inst.createInstance(cstype);
    obj.init(s, element, attrs);
};

